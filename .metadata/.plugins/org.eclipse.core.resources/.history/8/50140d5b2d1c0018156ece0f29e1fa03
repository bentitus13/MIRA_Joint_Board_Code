/*
 *
 */


/********** General C Header files *********/
#include <stdbool.h>
#include <stdint.h>


/********** XDCtools Header files **********/
#include <xdc/std.h>
#include <xdc/cfg/global.h>


/************ BIOS Header files ************/
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>


/*********** TI RTOS Header files **********/
#include <inc/hw_gpio.h>
#include <inc/hw_ints.h>
#include <inc/hw_memmap.h>
#include <inc/hw_types.h>
#include <ti/drivers/GPIO.h>
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"
#include "driverlib/sysctl.h"
// #include <ti/drivers/I2C.h>
// #include <ti/drivers/SDSPI.h>
// #include <ti/drivers/SPI.h>
// #include <ti/drivers/UART.h>
// #include <ti/drivers/Watchdog.h>
// #include <ti/drivers/WiFi.h>


/************ Local Header files ***********/
#include "include/Board.h"


/***************** Defines *****************/
#define HEARTBEAT_PIN GPIO_PIN_2
#define TASKSTACKSIZE   512


/************* Global Variables ************/
bool heartbeat = false;
int g_iMotorCtrl;


/**************** Clock SWIs ***************/
void Heartbeat(void) {
    if (heartbeat) {
        GPIOPinWrite(GPIO_PORTF_BASE, HEARTBEAT_PIN, HEARTBEAT_PIN);
        heartbeat = false;
    } else {
        GPIOPinWrite(GPIO_PORTF_BASE, HEARTBEAT_PIN, 0);
        heartbeat = true;
    }
}

void Motor_Timer(void) {
    Semaphore_post(Motor_Semaphore);
}


/****************** Tasks *****************/
void Motor_Drive(void) {
    while(1) {
        Semaphore_pend(Motor_Semaphore, BIOS_WAIT_FOREVER);
    }
}


/************* Helper Functions ************/
void Motor_Out(int spd) {
    PWMPulseWidthSet(PWM0_BASE, PWM_GEN_0, 2560);
}


/************* Setup Functions *************/
void GPIO_Setup(void) {
    /* EK_TM4C123GXL_GPIO_SW2 - PF0 requires unlocking before configuration */
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, HEARTBEAT_PIN);


    // Initialize PB6 as PWM output
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    GPIOPinConfigure(GPIO_PB6_M0PWM0);
    GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6);

}
void Motor_Setup(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);

    SysCtlPWMClockSet(SYSCTL_PWMDIV_32);
//    PWMClockSet(PWM_BASE, PWM_SYSCLK_DIV_64);

    PWMDeadBandDisable(PWM0_BASE, PWM_GEN_0);

    PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC);

    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, 5120);

    PWMPulseWidthSet(PWM0_BASE, PWM_GEN_0, 0);

    PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT, true);

    PWMOutputUpdateMode(PWM0_BASE, PWM_OUT_0_BIT, PWM_OUTPUT_MODE_NO_SYNC);

    PWMGenEnable(PWM0_BASE, PWM_GEN_0);
}

// Main, call all setup functions and start BIOS
int main(void) {
    IntMasterDisable();
    /* Call board init functions */
    //Board_initGeneral();
    //Board_initGPIO();
    // Board_initI2C();
    // Board_initSDSPI();
    // Board_initSPI();
    // Board_initUART();
    // Board_initUSB(Board_USBDEVICE);
    // Board_initWatchdog();
    // Board_initWiFi();

    GPIO_Setup();
    Motor_Setup();

    /* Turn on user LED  */
    GPIO_write(Board_LED0, Board_LED_ON);

    IntMasterEnable();
    /* Start BIOS */
    BIOS_start();

    return (0);
}
